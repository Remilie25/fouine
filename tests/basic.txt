Add_mul_prec/|/3+2*4/|/App(App(Add, 3), App(App(Mul, 2), 4))/|/- : int = 11 EOL 
Var_simple/|/let k = 1 in 1+k/|/Let_id_in(Id(k), 1, App(App(Add, 1), Id(k)))/|/- : int = 2 EOL 
If_simple/|/if 2>1 then (if 1>2 then 0 else 1) else 2/|/If_then_else(App(App(Grt, 2), 1), If_then_else(App(App(Grt, 1), 2), 0, 1), 2)/|/- : int = 1 EOL 
Var_if/|/let x=5 in if x = 2 then x+1 else 10*x+2/|/Let_id_in(Id(x), 5, If_then_else(App(App(Eq, Id(x)), 2), App(App(Add, Id(x)), 1), App(App(Add, App(App(Mul, 10), Id(x))), 2)))/|/- : int = 52 EOL 
Simple_fun/|/fun x-> x+1/|/Fun(x, App(App(Add, Id(x)), 1))/|/- : fun EOL 
Curry_fun/|/fun x y -> x+y/|/Fun(x, Fun(y, App(App(Add, Id(x)), Id(y))))/|/- : fun EOL 
Apply_simple_fun/|/(fun x-> x+1) 1/|/App(Fun(x, App(App(Add, Id(x)), 1)), 1)/|/- : int = 2 EOL 
Apply_fun_to_app/|/(fun x-> x*10) ((fun x-> x+2) 0)/|/App(Fun(x, App(App(Mul, Id(x)), 10)), App(Fun(x, App(App(Add, Id(x)), 2)), 0))/|/- : int = 20 EOL 
Apply_fun_to_fun/|/(fun f-> f 0) (fun x->x+1)/|/App(Fun(f, App(Id(f), 0)), Fun(x, App(App(Add, Id(x)), 1)))/|/- : int = 1 EOL 
Fun_returning_fun/|/fun x-> (((fun y-> y+x)))/|/Fun(x, Fun(y, App(App(Add, Id(y)), Id(x))))/|/- : fun EOL 
Fun_unit/|/(fun ()->1) ()/|/App(Fun(Unit, 1), Unit)/|/- : int = 1 EOL 
Fun_para_unit_0/|/(fun () x->()) () 1/|/App(App(Fun(Unit, Fun(x, Unit)), Unit), 1)/|/- : unit = () EOL 
Fun_para_unit_1/|/(fun x ()->5) 1 ()/|/App(App(Fun(x, Fun(Unit, 5)), 1), Unit)/|/- : int = 5 EOL 
Let_fun_0/|/let f x y = x + y in f 1 2/|/Let_id_in(Id(f), Fun(x, Fun(y, App(App(Add, Id(x)), Id(y)))), App(App(Id(f), 1), 2))/|/- : int = 3 EOL 
Let_fun_1/|/let f = fun x y -> x * y in f 7 2/|/Let_id_in(Id(f), Fun(x, Fun(y, App(App(Mul, Id(x)), Id(y)))), App(App(Id(f), 7), 2))/|/- : int = 14 EOL 
Let_fun_2/|/let f x = fun y -> x / y in f 9 3/|/Let_id_in(Id(f), Fun(x, Fun(y, App(App(Div, Id(x)), Id(y)))), App(App(Id(f), 9), 3))/|/- : int = 3 EOL 
Let_fun_var_libre/|/let k = 2 in let c = 5 in let f x y = k*(x+y)+c in let k = 1 in f k 2/|/Let_id_in(Id(k), 2, Let_id_in(Id(c), 5, Let_id_in(Id(f), Fun(x, Fun(y, App(App(Add, App(App(Mul, Id(k)), App(App(Add, Id(x)), Id(y)))), Id(c)))), Let_id_in(Id(k), 1, App(App(Id(f), Id(k)), 2)))))/|/- : int = 11 EOL 
Let_operand_0/|/1 + let f=(fun x-> x+1) in f 0/|/App(App(Add, 1), Let_id_in(Id(f), Fun(x, App(App(Add, Id(x)), 1)), App(Id(f), 0)))/|/- : int = 2 EOL 
Let_operand_1/|/(let f=(fun x-> x+1) in f 0) + 1/|/App(App(Add, Let_id_in(Id(f), Fun(x, App(App(Add, Id(x)), 1)), App(Id(f), 0))), 1)/|/- : int = 2 EOL 
Apply_operand/|/let f=(fun x-> x+1) in f 1 * 2/|/Let_id_in(Id(f), Fun(x, App(App(Add, Id(x)), 1)), App(App(Mul, App(Id(f), 1)), 2))/|/- : int = 4 EOL 
Fun_same_parameters/|/let f x y = 1 + ((fun x y -> x + y) (x*y) 1) in f 2 3/|/Let_id_in(Id(f), Fun(x, Fun(y, App(App(Add, 1), App(App(Fun(x, Fun(y, App(App(Add, Id(x)), Id(y)))), App(App(Mul, Id(x)), Id(y))), 1)))), App(App(Id(f), 2), 3))/|/- : int = 8 EOL 
Factorielle/|/let rec facto k = if (k = 0) then 1 else k * (facto (k-1)) in facto 5/|/Let_id_in(Id(facto), Fun(k, If_then_else(App(App(Eq, Id(k)), 0), 1, App(App(Mul, Id(k)), App(Id(facto), App(App(Min, Id(k)), 1))))), App(Id(facto), 5))/|/- : int = 120 EOL 
Let_id/|/let x=1;;let y=2;;let z= begin x+y end in z/|/Let_id(Id(x), 1);; Let_id(Id(y), 2);; Let_id_in(Id(z), App(App(Add, Id(x)), Id(y)), Id(z))/|/val x : int = 1 EOL val y : int = 2 EOL - : int = 3 EOL 
